rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isExistingUser(userId) {
      return exists(path('/databases/$(database)/documents/users/' + userId));
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isVerified() {
      let userPath = path('/databases/$(database)/documents/users/' + request.auth.uid);
      return isExistingUser(request.auth.uid) && get(userPath).data.isVerified == true;
    }
    
    function isAdmin() {
      let userPath = path('/databases/$(database)/documents/users/' + request.auth.uid);
      // Use 'in' to check for role in array
      return isVerified() && ('Admin' in get(userPath).data.roles || 'Super Admin' in get(userPath).data.roles);
    }
    
    // --- Default Read Rule ---
    // Allow any verified user to read data from any collection.
    // This simplifies client-side queries. Write rules below will secure the data.
    match /{document=**} {
        allow read: if isVerified();
    }

    // --- Write Rules (Specific & Secure) ---

    // Users Collection
    match /users/{userId} {
      // A user can create their own profile or update it.
      allow create, update: if isOwner(userId);
      // Admins can also update user profiles (e.g., roles, verification).
      allow update: if isAdmin();
    }

    // Requests Collection
    match /requests/{requestId} {
      // A verified user can create a request for themselves.
      allow create: if isVerified() && request.resource.data.requester.id == request.auth.uid;
      
      // An update is allowed if:
      // 1. The user is the assigned supervisor (approving/rejecting).
      // 2. The user is the requester and the request is 'released' (for submitting a report).
      // 3. The user is a releaser.
      // 4. The user is an admin.
      allow update: if isVerified() && (
        request.auth.uid == resource.data.supervisor.id ||
        (request.auth.uid == resource.data.requester.id && resource.data.status == 'released') ||
        get(path('/databases/$(database)/documents/users/' + request.auth.uid)).data.roles.hasAny(['Releaser', 'Admin', 'Super Admin'])
      );
    }
    
    // Reports Collection
    match /reports/{reportId} {
        allow create: if isVerified();
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isVerified();
    }
    
    // System Data Collections (Admin Only)
    match /departments/{docId} { allow write: if isAdmin(); }
    match /budgetCategories/{docId} { allow write: if isAdmin(); }
    match /fundAccounts/{docId} { allow write: if isAdmin(); }
    match /banks/{docId} { allow write: if isAdmin(); }
    match /units/{docId} { allow write: if isAdmin(); }
    match /memoSubjects/{docId} { allow write: if isAdmin(); }
    match /settings/{docId} { allow write: if isAdmin(); }
  }
}